{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/vilquer/elt-579-118781-problema-da-semana-2?scriptVersionId=196873671\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"b0c74c18","metadata":{"papermill":{"duration":0.004534,"end_time":"2024-09-16T11:22:47.909528","exception":false,"start_time":"2024-09-16T11:22:47.904994","status":"completed"},"tags":[]},"source":["## Importações e configurações"]},{"cell_type":"code","execution_count":1,"id":"eb367254","metadata":{"execution":{"iopub.execute_input":"2024-09-16T11:22:47.920042Z","iopub.status.busy":"2024-09-16T11:22:47.919486Z","iopub.status.idle":"2024-09-16T11:22:50.315009Z","shell.execute_reply":"2024-09-16T11:22:50.313786Z"},"papermill":{"duration":2.403984,"end_time":"2024-09-16T11:22:50.317852","exception":false,"start_time":"2024-09-16T11:22:47.913868","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","\n","from sklearn.compose import ColumnTransformer\n","from sklearn.feature_selection import RFE\n","from sklearn.preprocessing import  StandardScaler, MinMaxScaler, RobustScaler\n","from sklearn.decomposition import PCA\n","from sklearn.pipeline import Pipeline\n","from sklearn.model_selection import train_test_split, cross_val_score, cross_validate, ShuffleSplit, GridSearchCV, RandomizedSearchCV\n","from sklearn.linear_model import LinearRegression\n","from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","from xgboost import XGBRegressor\n","from sklearn.metrics import make_scorer, mean_squared_error, mean_absolute_error, r2_score\n","\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","warnings.simplefilter('ignore')\n","\n","from IPython.display import display, HTML\n","\n","caminho_dos_dados = '/kaggle/input/dataset-problema2/dataset_problema2.csv'"]},{"cell_type":"markdown","id":"63b0695c","metadata":{"papermill":{"duration":0.003828,"end_time":"2024-09-16T11:22:50.325859","exception":false,"start_time":"2024-09-16T11:22:50.322031","status":"completed"},"tags":[]},"source":["## Modelo entregue como base"]},{"cell_type":"code","execution_count":2,"id":"c4d2bd73","metadata":{"execution":{"iopub.execute_input":"2024-09-16T11:22:50.33596Z","iopub.status.busy":"2024-09-16T11:22:50.335374Z","iopub.status.idle":"2024-09-16T11:22:52.240419Z","shell.execute_reply":"2024-09-16T11:22:52.239227Z"},"papermill":{"duration":1.913256,"end_time":"2024-09-16T11:22:52.243083","exception":false,"start_time":"2024-09-16T11:22:50.329827","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Importar o dataset...\n","Separar dados de treinamento e dados de teste...\n","Padronizar os dados...\n","seleção de features...\n","Médias dos Scores\n","-0.06445199150879911\n","0.09396486029263365\n","0.6727804225015419\n","0.726672062129073\n","0.8223245283790293\n","0.8233753596097613\n","0.8202942847768545\n","0.8160171069363862\n","0.8642534971610811\n","0.8655536026351045\n","0.8592050402770244\n","0.8626245070274547\n","0.8617649200609072\n","0.8568329558908353\n","0.85515608058196\n","0.8539354093341999\n","0.8498948606437716\n","0.8484410541107404\n","0.843880605104897\n","0.8417215821030458\n","Gráfico...\n"]},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Seleção de features - Final...\n","Features Index(['NDVI_d28', 'SAVI_d28', 'GNDVI_d28', 'MCARI1_d28', 'SR_d28', 'NDVI_d01',\n","       'SAVI_d01', 'GNDVI_d01', 'MCARI1_d01', 'SR_d01', 'NDVI_d04', 'SAVI_d04',\n","       'GNDVI_d04', 'MCARI1_d04', 'SR_d04', 'NDVI_d08', 'SAVI_d08',\n","       'GNDVI_d08', 'MCARI1_d08', 'SR_d08'],\n","      dtype='object')\n","Médias dos Scores\n","0.8655536026351045\n","Features selecionadas Index(['NDVI_d28', 'SAVI_d28', 'NDVI_d01', 'SAVI_d01', 'NDVI_d04', 'SAVI_d04',\n","       'NDVI_d08', 'SAVI_d08', 'GNDVI_d08', 'SR_d08'],\n","      dtype='object')\n","validação cruzada\n","0.8655536026351045\n","Modelo final - Regressão linear multipla...\n","Testar nos dados de teste...\n","\n","Resultados em teste:\n","r2 0.887634277870405\n","rmse 7.539476072278346\n","mae 6.344066348950323\n"]}],"source":["# -*- coding: utf-8 -*-\n","\"\"\"\n","\n","@author: sarvio valente\n","\n","\"\"\"\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","print('Importar o dataset...')\n","\n","df = pd.read_csv(caminho_dos_dados)\n","\n","X = df.drop(['id', 'Severidade'], axis = 1)\n","y = df['Severidade']\n","\n","print('Separar dados de treinamento e dados de teste...')\n","\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n","\n","print('Padronizar os dados...')\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler() #media 0 e desvio padrão 1\n","\n","X_train_sc = scaler.fit_transform(X_train)\n","\n","X_test_sc = scaler.transform(X_test)\n","\n","X_train_sc = pd.DataFrame(X_train_sc)\n","X_train_sc.columns = X_train.columns\n","\n","X_test_sc = pd.DataFrame(X_test_sc)\n","X_test_sc.columns = X_train.columns\n","\n","\n","print('seleção de features...')\n","from sklearn.feature_selection import RFE\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import cross_val_score\n","\n","max_f = 20\n","\n","lista_score = list()\n","print('Médias dos Scores')\n","for i in range(1, max_f +1):\n","\n","    modelo_linear = LinearRegression()\n","    selector = RFE(modelo_linear, n_features_to_select = i, step = 1)\n","    selector = selector.fit(X_train_sc, y_train)\n","    mask = selector.support_\n","    features = X_train_sc.columns\n","    sel_features = features[mask]\n","    X_sel = X_train_sc[sel_features]\n","    score = cross_val_score(modelo_linear, X_sel, y_train, cv = 10, scoring = 'r2')\n","    print(np.mean(score))\n","    lista_score.append(np.mean(score))\n","\n","print('Gráfico...')\n","\n","import matplotlib.pyplot as plt\n","\n","plt.plot(lista_score)\n","\n","plt.show()\n","\n","print('Seleção de features - Final...')\n","from sklearn.feature_selection import RFE\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import cross_val_score\n","\n","\n","modelo_linear = LinearRegression()\n","selector = RFE(modelo_linear, n_features_to_select = 10, step = 1)\n","selector = selector.fit(X_train_sc, y_train)\n","mask = selector.support_\n","features = X_train_sc.columns\n","print('Features', features)\n","sel_features = features[mask]\n","X_sel = X_train_sc[sel_features]\n","score = cross_val_score(modelo_linear, X_sel, y_train, cv = 10, scoring = 'r2')\n","\n","print('Médias dos Scores')\n","print(np.mean(score))\n","print('Features selecionadas', sel_features)\n","\n","print('validação cruzada')\n","\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import cross_val_score\n","\n","modelo_linear = LinearRegression()\n","\n","score = cross_val_score(modelo_linear, X_sel, y_train, cv = 10, scoring = 'r2')\n","\n","print(np.mean(score))\n","\n","\n","print('Modelo final - Regressão linear multipla...')\n","\n","modelo_linear = LinearRegression()\n","\n","modelo_linear.fit(X_sel, y_train)\n","\n","\n","print('Testar nos dados de teste...')\n","\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","y_pred = modelo_linear.predict(X_test_sc[sel_features])\n","\n","r2 = modelo_linear.score(X_test_sc[sel_features], y_test)\n","\n","rmse = (mean_squared_error(y_test, y_pred)**0.5)\n","\n","mae = mean_absolute_error(y_test, y_pred)\n","\n","print('')\n","\n","print('Resultados em teste:')\n","print('r2', r2)\n","print('rmse', rmse)\n","print('mae', mae)\n"]},{"cell_type":"markdown","id":"20c6ba26","metadata":{"papermill":{"duration":0.004957,"end_time":"2024-09-16T11:22:52.253448","exception":false,"start_time":"2024-09-16T11:22:52.248491","status":"completed"},"tags":[]},"source":["## Modeo desafiane"]},{"cell_type":"code","execution_count":3,"id":"5878dee9","metadata":{"execution":{"iopub.execute_input":"2024-09-16T11:22:52.266397Z","iopub.status.busy":"2024-09-16T11:22:52.265977Z","iopub.status.idle":"2024-09-16T11:35:08.007358Z","shell.execute_reply":"2024-09-16T11:35:08.00609Z"},"papermill":{"duration":735.751487,"end_time":"2024-09-16T11:35:08.01018","exception":false,"start_time":"2024-09-16T11:22:52.258693","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 6/6 [12:15<00:00, 122.59s/it]\n"]},{"data":{"text/html":["<style type=\"text/css\">\n","#T_3db60_row0_col3, #T_3db60_row1_col1, #T_3db60_row2_col3, #T_3db60_row3_col3, #T_3db60_row4_col3 {\n","  color: white;\n","  background-color: gray;\n","}\n","</style>\n","<table id=\"T_3db60\">\n","  <thead>\n","    <tr>\n","      <th id=\"T_3db60_level0_col0\" class=\"col_heading level0 col0\" >score</th>\n","      <th id=\"T_3db60_level0_col1\" class=\"col_heading level0 col1\" >Decision Tree Regressor</th>\n","      <th id=\"T_3db60_level0_col2\" class=\"col_heading level0 col2\" >Gradient Boosting Regressor</th>\n","      <th id=\"T_3db60_level0_col3\" class=\"col_heading level0 col3\" >KNN Regressor</th>\n","      <th id=\"T_3db60_level0_col4\" class=\"col_heading level0 col4\" >Linear Regression</th>\n","      <th id=\"T_3db60_level0_col5\" class=\"col_heading level0 col5\" >Random Forest Regressor</th>\n","      <th id=\"T_3db60_level0_col6\" class=\"col_heading level0 col6\" >XGBoost Regressor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td id=\"T_3db60_row0_col0\" class=\"data row0 col0\" >fit_time</td>\n","      <td id=\"T_3db60_row0_col1\" class=\"data row0 col1\" >0.033 ± 0.005</td>\n","      <td id=\"T_3db60_row0_col2\" class=\"data row0 col2\" >0.126 ± 0.018</td>\n","      <td id=\"T_3db60_row0_col3\" class=\"data row0 col3\" >0.010 ± 0.001</td>\n","      <td id=\"T_3db60_row0_col4\" class=\"data row0 col4\" >0.034 ± 0.005</td>\n","      <td id=\"T_3db60_row0_col5\" class=\"data row0 col5\" >1.405 ± 0.213</td>\n","      <td id=\"T_3db60_row0_col6\" class=\"data row0 col6\" >0.121 ± 0.020</td>\n","    </tr>\n","    <tr>\n","      <td id=\"T_3db60_row1_col0\" class=\"data row1 col0\" >score_time</td>\n","      <td id=\"T_3db60_row1_col1\" class=\"data row1 col1\" >0.004 ± 0.001</td>\n","      <td id=\"T_3db60_row1_col2\" class=\"data row1 col2\" >0.005 ± 0.001</td>\n","      <td id=\"T_3db60_row1_col3\" class=\"data row1 col3\" >0.005 ± 0.001</td>\n","      <td id=\"T_3db60_row1_col4\" class=\"data row1 col4\" >0.005 ± 0.001</td>\n","      <td id=\"T_3db60_row1_col5\" class=\"data row1 col5\" >0.026 ± 0.004</td>\n","      <td id=\"T_3db60_row1_col6\" class=\"data row1 col6\" >0.006 ± 0.001</td>\n","    </tr>\n","    <tr>\n","      <td id=\"T_3db60_row2_col0\" class=\"data row2 col0\" >test_RMSE</td>\n","      <td id=\"T_3db60_row2_col1\" class=\"data row2 col1\" >-9.256 ± 1.116</td>\n","      <td id=\"T_3db60_row2_col2\" class=\"data row2 col2\" >-8.318 ± 3.119</td>\n","      <td id=\"T_3db60_row2_col3\" class=\"data row2 col3\" >-6.041 ± 2.038</td>\n","      <td id=\"T_3db60_row2_col4\" class=\"data row2 col4\" >-7.283 ± 1.522</td>\n","      <td id=\"T_3db60_row2_col5\" class=\"data row2 col5\" >-7.447 ± 2.453</td>\n","      <td id=\"T_3db60_row2_col6\" class=\"data row2 col6\" >-7.861 ± 1.569</td>\n","    </tr>\n","    <tr>\n","      <td id=\"T_3db60_row3_col0\" class=\"data row3 col0\" >test_MAE</td>\n","      <td id=\"T_3db60_row3_col1\" class=\"data row3 col1\" >-6.501 ± 0.669</td>\n","      <td id=\"T_3db60_row3_col2\" class=\"data row3 col2\" >-5.685 ± 1.865</td>\n","      <td id=\"T_3db60_row3_col3\" class=\"data row3 col3\" >-4.464 ± 1.379</td>\n","      <td id=\"T_3db60_row3_col4\" class=\"data row3 col4\" >-5.444 ± 1.018</td>\n","      <td id=\"T_3db60_row3_col5\" class=\"data row3 col5\" >-5.398 ± 1.567</td>\n","      <td id=\"T_3db60_row3_col6\" class=\"data row3 col6\" >-5.349 ± 0.851</td>\n","    </tr>\n","    <tr>\n","      <td id=\"T_3db60_row4_col0\" class=\"data row4 col0\" >test_R2</td>\n","      <td id=\"T_3db60_row4_col1\" class=\"data row4 col1\" >0.826 ± 0.041</td>\n","      <td id=\"T_3db60_row4_col2\" class=\"data row4 col2\" >0.836 ± 0.125</td>\n","      <td id=\"T_3db60_row4_col3\" class=\"data row4 col3\" >0.917 ± 0.066</td>\n","      <td id=\"T_3db60_row4_col4\" class=\"data row4 col4\" >0.889 ± 0.052</td>\n","      <td id=\"T_3db60_row4_col5\" class=\"data row4 col5\" >0.874 ± 0.089</td>\n","      <td id=\"T_3db60_row4_col6\" class=\"data row4 col6\" >0.867 ± 0.062</td>\n","    </tr>\n","  </tbody>\n","</table>\n"],"text/plain":["<pandas.io.formats.style.Styler at 0x7a9729f5a8c0>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<h3> O melhor modelo é o : <span style=\"color:red\">KNN Regressor</span></h3>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Model</th>\n","      <td>KNN Regressor</td>\n","    </tr>\n","    <tr>\n","      <th>Best n_features_to_select (RFE)</th>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>preprocessing__scaler</th>\n","      <td>StandardScaler()</td>\n","    </tr>\n","    <tr>\n","      <th>model__n_neighbors</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>model__weights</th>\n","      <td>distance</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                1\n","Model                               KNN Regressor\n","Best n_features_to_select (RFE)                20\n","preprocessing__scaler            StandardScaler()\n","model__n_neighbors                            5.0\n","model__weights                           distance"]},"metadata":{},"output_type":"display_data"}],"source":["# Regressor base para RFE\n","base_regressor = LinearRegression()\n","\n","# Preprocessador com RFE e possibilidade de diferentes Scalers\n","preprocessor = Pipeline(steps=[\n","    (\"scaler\", StandardScaler()),  # Placeholder; será ajustado pelo GridSearchCV\n","    (\"rfe\", RFE(estimator=base_regressor))  # RFE ; será ajustado pelo GridSearchCV\n","])\n","\n","# Modelos de regressão e parâmetros para grid search\n","models = {\n","    'Linear Regression': LinearRegression(),\n","    'KNN Regressor': KNeighborsRegressor(),\n","    'Decision Tree Regressor': DecisionTreeRegressor(random_state=0),\n","    'Random Forest Regressor': RandomForestRegressor(random_state=0),\n","    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=0),\n","    'XGBoost Regressor': XGBRegressor(random_state=0)\n","}\n","\n","# Parâmetros de Grid Search para cada modelo\n","params = {\n","    'Linear Regression': {\n","        'model__fit_intercept': [True, False],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],  # Diferentes escaladores\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))  # Otimização de n_features_to_select\n","    },\n","    'KNN Regressor': {\n","        'model__n_neighbors': [5, 10, 15],\n","        'model__weights': ['uniform', 'distance'],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))\n","    },\n","    'Decision Tree Regressor': {\n","        'model__max_depth': [None, 10, 20],\n","        'model__criterion': ['squared_error', 'friedman_mse', 'absolute_error'],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))\n","    },\n","    'Random Forest Regressor': {\n","        'model__n_estimators': [100, 200, 300],\n","        'model__criterion': ['squared_error', 'absolute_error'],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))\n","    },\n","    'Gradient Boosting Regressor': {\n","        'model__n_estimators': [100, 200],\n","        'model__learning_rate': [0.01, 0.1, 0.2],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))\n","    },\n","    'XGBoost Regressor': {\n","        'model__max_depth': [3, 5, 7],\n","        'model__gamma': [0, 0.5, 1],\n","        'model__n_estimators': [100, 200],\n","        'preprocessing__scaler': [StandardScaler(), MinMaxScaler(), RobustScaler()],\n","        'preprocessing__rfe__n_features_to_select': list(range(1, len(X_train.columns) + 1))\n","    }\n","}\n","\n","# Resultados\n","results = {}\n","n_splits = 5  # Número de divisões para cross-validation\n","best_params = {}  # Para armazenar os melhores hiperparâmetros de cada modelo\n","\n","# Definir custom scorers\n","def rmse(y_true, y_pred):\n","    return mean_squared_error(y_true, y_pred) ** 0.5\n","\n","def mae(y_true, y_pred):\n","    return mean_absolute_error(y_true, y_pred)\n","\n","# Custom scoring\n","scoring = {\n","    'RMSE': make_scorer(rmse, greater_is_better=False),\n","    'MAE': make_scorer(mae, greater_is_better=False),\n","    'R2': make_scorer(r2_score)\n","}\n","\n","n_splits = 5  # Número de divisões para cross-validation\n","# Divisões de dados aleatórios fixas\n","cv = ShuffleSplit(n_splits=n_splits, test_size=0.2, random_state=0)  \n","\n","# Cross-validation com GridSearchCV para cada regressor\n","for model_name, model in tqdm(models.items()):\n","    # Grid de parâmetros\n","    param_grid = params.get(model_name, {})\n","    \n","    # Pipeline de abordagem\n","    approach = Pipeline([\n","        ('preprocessing', preprocessor),\n","        ('model', model)\n","    ])\n","    \n","    # GridSearchCV\n","    gs = GridSearchCV(\n","        estimator=approach,\n","        param_grid=param_grid,\n","        scoring='r2',  # Alterado para usar R2 como métrica de pontuação\n","        cv=cv,\n","        n_jobs=-1\n","    )\n","    \n","    # Ajustar o modelo\n","    gs.fit(X_train, y_train)\n","    \n","    # Recuperar os melhores parâmetros e a melhor pontuação\n","    best_params[model_name] = gs.best_params_\n","    \n","    # Cross-validation para avaliar o melhor modelo\n","    scores = cross_validate(\n","        estimator=gs.best_estimator_,\n","        X=X_train,\n","        y=y_train,\n","        cv=cv,\n","        n_jobs=-1,\n","        verbose=0,\n","        scoring=scoring\n","    )\n","    \n","    scores['model'] = [model_name] * n_splits\n","    if not results:\n","        results = scores\n","    else:\n","        for key in results:\n","            results[key] = list(results[key])\n","            results[key].extend(scores[key])\n","\n","# Inicializando uma lista para armazenar os resultados\n","best_params_list = []\n","\n","# Iterando pelos melhores parâmetros de cada modelo e organizando em um DataFrame\n","for model_name in best_params:\n","    model_best_params = best_params[model_name].copy()  # Faz uma cópia para evitar alterações indesejadas\n","    model_best_params['Model'] = model_name  # Adiciona o nome do modelo\n","    # Verifica se 'preprocessing__rfe__n_features_to_select' está nos melhores parâmetros\n","    if 'preprocessing__rfe__n_features_to_select' in model_best_params:\n","        model_best_params['Best n_features_to_select (RFE)'] = model_best_params.pop('preprocessing__rfe__n_features_to_select')\n","    else:\n","        model_best_params['Best n_features_to_select (RFE)'] = None  # Caso não haja seleção de features, coloca None\n","    \n","    # Adiciona o dicionário à lista\n","    best_params_list.append(model_best_params)\n","\n","# Convertendo a lista de dicionários em um DataFrame\n","df_best_params = pd.DataFrame(best_params_list)\n","\n","# Reorganizando colunas para melhor visualização\n","df_best_params = df_best_params[['Model', 'Best n_features_to_select (RFE)'] + [col for col in df_best_params.columns if col not in ['Model', 'Best n_features_to_select (RFE)']]]\n","\n","# Converter resultados para DataFrame e agregar\n","resultados = pd.DataFrame(results).groupby('model').agg([lambda x: f\"{np.mean(x):.3f} ± {np.std(x):.3f}\"]).transpose().reset_index()\n","resultados = resultados.rename(columns={\"level_0\": \"score\"}).drop(columns=\"level_1\")\n","\n","# Funções para destacar os melhores resultados\n","def highlight_max(s, props=''):\n","    values = [float(value.split()[0]) for value in s.values[1:]]\n","    result = [''] * len(s.values)\n","    if s.values[0].endswith('time'):\n","        result[np.argmin(values) + 1] = props\n","    else:\n","        result[np.argmax(values) + 1] = props\n","    return result\n","\n","def get_winner(s):\n","    metric = s.values[0]\n","    values = [float(value.split()[0]) for value in s.values[1:]]\n","    models = resultados.columns[1:]\n","    \n","    if s.values[0].endswith('time'):\n","        return models[np.argmin(values)]\n","    else:\n","        return models[np.argmax(values)]\n","\n","# Determinar o modelo vencedor\n","time_scores = ['fit_time', 'score_time']\n","winner = resultados.query('score not in @time_scores').apply(get_winner, axis=1).value_counts().index[0]\n","resultados.columns.name = ''\n","\n","# Aplicar estilo e exibir resultados\n","resultados = (\n","    resultados\n","    .style\n","    .hide(axis='index')\n","    .apply(highlight_max, props='color:white;background-color:gray', axis=1)\n",")\n","\n","display(resultados)\n","display(HTML(f'<h3> O melhor modelo é o : <span style=\"color:red\">{winner}</span></h3>'))\n","\n","display(df_best_params.loc[df_best_params['Model'] == winner].dropna(axis=1).T)\n","\n"]},{"cell_type":"markdown","id":"ebb16f8d","metadata":{"papermill":{"duration":0.006657,"end_time":"2024-09-16T11:35:08.023826","exception":false,"start_time":"2024-09-16T11:35:08.017169","status":"completed"},"tags":[]},"source":["## Modelo Final"]},{"cell_type":"code","execution_count":4,"id":"1cfd0733","metadata":{"execution":{"iopub.execute_input":"2024-09-16T11:35:08.039696Z","iopub.status.busy":"2024-09-16T11:35:08.039137Z","iopub.status.idle":"2024-09-16T11:35:08.1112Z","shell.execute_reply":"2024-09-16T11:35:08.106392Z"},"papermill":{"duration":0.083774,"end_time":"2024-09-16T11:35:08.114387","exception":false,"start_time":"2024-09-16T11:35:08.030613","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["r2 0.9054594871570645\n","rmse 6.915653423625461\n","mae 5.5860499237985675\n"]}],"source":["final_pipeline = Pipeline([\n","    ('preprocessing', Pipeline([\n","        ('scaler', StandardScaler()),  # Melhor escalonador encontrado\n","        ('rfe', RFE(estimator=base_regressor, \n","                    n_features_to_select= 20 ))  # Melhor número de features encontradas\n","    ])),\n","    ('model', KNeighborsRegressor(n_neighbors=5, \n","                                  weights='distance'))  # Melhor modelo e hiperparâmetros encontrados\n","])\n","\n","# Treinar o modelo final no conjunto de dados completo\n","final_pipeline.fit(X_train, y_train)\n","y_pred = final_pipeline.predict(X_test)\n","\n","r2 = final_pipeline.score(X_test, y_test)\n","\n","rmse = (mean_squared_error(y_test, y_pred)**0.5)\n","\n","mae = mean_absolute_error(y_test, y_pred)\n","\n","print('r2', r2)\n","print('rmse', rmse)\n","print('mae', mae)"]},{"cell_type":"code","execution_count":null,"id":"9a124ba7","metadata":{"papermill":{"duration":0.033511,"end_time":"2024-09-16T11:35:08.15722","exception":false,"start_time":"2024-09-16T11:35:08.123709","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5689421,"sourceId":9378917,"sourceType":"datasetVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":745.825591,"end_time":"2024-09-16T11:35:10.814394","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-16T11:22:44.988803","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}